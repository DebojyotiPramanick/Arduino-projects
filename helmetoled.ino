#include <RH_ASK.h>
#include <SPI.h> // Not actually used but needed to compile
RH_ASK driver(2000, 4, 2, 5);
int sensorPin = A0;
int pirSensor = 4;
int Value=0;
int sum1=0;
int sum2=0;
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for SSD1306 display connected using software SPI (default case):
#define OLED_MOSI   9
#define OLED_CLK   10
#define OLED_DC    11
#define OLED_CS    12
#define OLED_RESET 13
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
  OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

/* Comment out above, uncomment this block to use hardware SPI
#define OLED_DC     6
#define OLED_CS     7
#define OLED_RESET  8
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
  &SPI, OLED_DC, OLED_RESET, OLED_CS);
*/

#define NUMFLAKES     10 // Number of snowflakes in the animation example

#define LOGO_HEIGHT   64
#define LOGO_WIDTH    64
static const unsigned char PROGMEM left[]=
{
  // 'left', 64x64px
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00,
0x00, 0x00, 0x02, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x20, 0x00, 0x00,
0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00,
0x00, 0x00, 0x20, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf0, 0x00, 0x02, 0x00, 0x00,
0x00, 0x00, 0x81, 0xe0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x07, 0xe0, 0x00, 0x00, 0x80, 0x00,
0x00, 0x02, 0x0f, 0xff, 0xf0, 0x00, 0x40, 0x00, 0x00, 0x04, 0x1f, 0xff, 0xfc, 0x00, 0x20, 0x00,
0x00, 0x08, 0x3f, 0xff, 0xfe, 0x00, 0x10, 0x00, 0x00, 0x10, 0x1f, 0xff, 0xff, 0x00, 0x08, 0x00,
0x00, 0x20, 0x07, 0xff, 0xff, 0x80, 0x04, 0x00, 0x00, 0x40, 0x03, 0xe0, 0x1f, 0x80, 0x02, 0x00,
0x00, 0x80, 0x00, 0xf0, 0x0f, 0x80, 0x01, 0x00, 0x01, 0x00, 0x00, 0x70, 0x07, 0xc0, 0x00, 0x80,
0x01, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x07, 0xc0, 0x01, 0x00,
0x00, 0x40, 0x00, 0x00, 0x07, 0xc0, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x07, 0xc0, 0x04, 0x00,
0x00, 0x10, 0x00, 0x00, 0x07, 0xc0, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x07, 0xc0, 0x10, 0x00,
0x00, 0x04, 0x00, 0x00, 0x07, 0xc0, 0x20, 0x00, 0x00, 0x02, 0x00, 0x00, 0x07, 0xc0, 0x40, 0x00,
0x00, 0x01, 0x00, 0x00, 0x07, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x07, 0xc1, 0x00, 0x00,
0x00, 0x00, 0x40, 0x00, 0x07, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x07, 0xc4, 0x00, 0x00,
0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00,
0x00, 0x00, 0x04, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x40, 0x00, 0x00,
0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
static const unsigned char PROGMEM right[]=
{
  // 'right', 64x64px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x20, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x20, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x0f, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x00, 0x07, 0x81, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 0xe0, 0x80, 0x00,
  0x00, 0x02, 0x00, 0x0f, 0xff, 0xf0, 0x40, 0x00, 0x00, 0x04, 0x00, 0x3f, 0xff, 0xfc, 0x20, 0x00,
  0x00, 0x08, 0x00, 0x7f, 0xff, 0xfc, 0x10, 0x00, 0x00, 0x10, 0x00, 0xff, 0xff, 0xf8, 0x08, 0x00,
  0x00, 0x20, 0x00, 0xff, 0xff, 0xe0, 0x04, 0x00, 0x00, 0x40, 0x01, 0xf8, 0x07, 0xc0, 0x02, 0x00,
  0x00, 0x80, 0x01, 0xf0, 0x07, 0x80, 0x01, 0x00, 0x01, 0x00, 0x01, 0xf0, 0x0e, 0x00, 0x00, 0x80,
  0x01, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x03, 0xe0, 0x00, 0x00, 0x01, 0x80,
  0x00, 0x40, 0x03, 0xe0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x20, 0x03, 0xe0, 0x00, 0x00, 0x06, 0x00,
  0x00, 0x10, 0x03, 0xe0, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x08, 0x03, 0xe0, 0x00, 0x00, 0x18, 0x00,
  0x00, 0x04, 0x03, 0xe0, 0x00, 0x00, 0x30, 0x00, 0x00, 0x02, 0x03, 0xe0, 0x00, 0x00, 0x60, 0x00,
  0x00, 0x01, 0x03, 0xe0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x00, 0x01, 0x80, 0x00,
  0x00, 0x00, 0x43, 0xe0, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x23, 0xe0, 0x00, 0x06, 0x00, 0x00,
  0x00, 0x00, 0x10, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x18, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x04, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x60, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
static const unsigned char PROGMEM straight[]=
{
  // 'sraight', 64x64px
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00,
0x00, 0x00, 0x01, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xe0, 0x20, 0x00, 0x00,
0x00, 0x00, 0x04, 0x01, 0xf0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x08, 0x03, 0xf8, 0x08, 0x00, 0x00,
0x00, 0x00, 0x10, 0x07, 0xfc, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0f, 0xfe, 0x02, 0x00, 0x00,
0x00, 0x00, 0x40, 0x1f, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0xff, 0x00, 0x80, 0x00,
0x00, 0x01, 0x00, 0x3f, 0xff, 0x00, 0x40, 0x00, 0x00, 0x02, 0x00, 0x3f, 0xff, 0x00, 0x20, 0x00,
0x00, 0x04, 0x00, 0x3f, 0xef, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x3b, 0xe7, 0x00, 0x08, 0x00,
0x00, 0x08, 0x00, 0x33, 0xe3, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x23, 0xe3, 0x00, 0x04, 0x00,
0x00, 0x10, 0x00, 0x01, 0xe0, 0x00, 0x04, 0x00, 0x00, 0x08, 0x00, 0x01, 0xe0, 0x00, 0x08, 0x00,
0x00, 0x08, 0x00, 0x01, 0xe0, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x01, 0xe0, 0x00, 0x10, 0x00,
0x00, 0x02, 0x00, 0x03, 0xe0, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x03, 0xe0, 0x00, 0x40, 0x00,
0x00, 0x00, 0x80, 0x03, 0xe0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x03, 0xe0, 0x01, 0x00, 0x00,
0x00, 0x00, 0x20, 0x03, 0xe0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x03, 0xe0, 0x04, 0x00, 0x00,
0x00, 0x00, 0x08, 0x03, 0xe0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0x03, 0xe0, 0x10, 0x00, 0x00,
0x00, 0x00, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};


void setup()
{
Serial.begin(9600);
if (!driver.init())
         Serial.println("init failed");
if(display.begin(SSD1306_SWITCHCAPVCC)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }


  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.clearDisplay();
  display.setTextSize(2);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(15, 12);             // Start at top-left corner
  display.println(F("SMART"));
  display.setTextSize(3);
  display.setCursor(15, 27);             // Start at top-left corner
  display.println(F("HELMET"));
  display.setTextSize(1);
  display.setCursor(15, 50);             // Start at top-left corner
  display.display();
  delay(1000);
  display.println(F("Initialising..."));
  display.display();
  delay(3000);


  display.clearDisplay();
  display.setTextSize(2);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(5, 5);             // Start at top-left corner
  display.println(F("NAVIGATION"));
  display.setTextSize(1);
  display.setCursor(5, 25);             // Start at top-left corner
  display.println(F("FROM: Garia"));
  display.setCursor(5, 35);             // Start at top-left corner
  display.println(F("TO: Jadavpur"));
  display.setTextSize(2);
  display.setCursor(55, 50);             // Start at top-left corner
  display.println(F("GO"));
  display.display();
  delay(3000);

pinMode(pirSensor, INPUT);
}
int alcohol()
{
  Value = analogRead(sensorPin);
Serial.print(Value);
if (Value-50 > 400) 

{
    
    Serial.println ("Alert");
     sum1=-1;
     Serial.print("sum1=");
     Serial.print(sum1);
    return sum1;   
  } 
  else {
     
    Serial.println("Normal");
    sum1=1;
    Serial.print("sum1=");
    Serial.print(sum1);
    return sum1;
  }
}
int pir()
{
  int sensorValue = digitalRead(pirSensor);
  Serial.print(sensorValue);
  if (sensorValue == 1) 
  {
    Serial.println("present");
     sum2=1;
     Serial.print("sum2=");
     Serial.print(sum2);
    return sum2;
    }
    
    else{
    Serial.println("absent");
    sum2=-1;
    Serial.println("sum2=");
    Serial.print(sum2);
    return sum2;}
}
void rftransmitter()
{
  const char *msg = "hello";

    driver.send((uint8_t *)msg, strlen(msg));
    driver.waitPacketSent();    
}
void switchoff()
{
  const char *msg = "notsafe";

    driver.send((uint8_t *)msg, strlen(msg));
    driver.waitPacketSent();
}
void goleft(int m, int del)
{
  display.clearDisplay();
  display.drawBitmap(
    0,
    0,
    left, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.setTextSize(2);
  display.setCursor(64,22);
  display.print(m);
  display.print(F("m"));
  display.setCursor(64,37);
  display.println(F("LEFT"));
  display.display();
  delay(del);
}
void goright(int m, int del)
{
  display.clearDisplay();
  display.drawBitmap(
    0,
    0,
    right, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.setTextSize(2);
  display.setCursor(64,22);
  display.print(m);
  display.print(F("m"));
  display.setCursor(64,37);
  display.println(F("RIGHT"));
  display.display();
  delay(del);
}
void gostraight(int m, int del)
{
  display.clearDisplay();
  display.drawBitmap(
    0,
    0,
    straight, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.setTextSize(2);
  display.setCursor(64,22);
  display.print(m);
  display.print(F("m"));
  display.setTextSize(1);
  display.setCursor(64,45);
  display.println(F("STRAIGHT"));
  display.display();
  delay(del);
}
void acc()
{
  for (int i= 60; i>=0; i--)
  {
    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(15,5);
    display.print(F("ACCIDENT"));
    display.setCursor(2, 25);
    display.setTextSize(1);
    display.print(F("Press Button within"));
    display.setCursor(2, 55);
    display.setTextSize(1);
    display.print(F("to disable the alarm"));
    display.display();
    display.setCursor(50, 36);
    display.setTextSize(2);
    display.print(i);
    display.print(F("s"));
    display.invertDisplay(i%2);
    display.display();
    delay(1000);
  }
  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(4,25);
  display.print(F("ALERT SENT"));
  display.display();
  delay(3000);
}
void loop()
{
   goleft(400,2000);
  goleft(300,2000);
  goleft(200,2000);
  goleft(100,2000);
  goright(700, 2000);
  goright(600, 2000);
  goright(500, 2000);
  goright(400, 2000);
  goright(300, 2000);
  goright(200, 2000);
  goright(100, 2000);
  goleft(200,2000);
  goleft(100,2000);
  goright(50, 1000);
  acc();
 int sum=alcohol()+pir();
 Serial.println("Combined sum");
 Serial.print(sum);
  if(sum==2)
  {
    rftransmitter();
    
  }
  else
  {
    switchoff();
  }
  delay(3000);
}
